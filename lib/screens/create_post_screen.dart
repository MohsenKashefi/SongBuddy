import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui';
import '../constants/app_colors.dart';
import '../constants/app_text_styles.dart';
import '../models/Post.dart';
import '../services/backend_service.dart';
import '../providers/auth_provider.dart';

class CreatePostScreen extends StatefulWidget {
  final Map<String, dynamic> selectedTrack;
  final String selectedTrackId;

  const CreatePostScreen({
    super.key,
    required this.selectedTrack,
    required this.selectedTrackId,
  });

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  late final TextEditingController _descriptionController;
  late final AuthProvider _authProvider;
  late final BackendService _backendService;
  
  bool _isPosting = false;
  final int _maxDescriptionLength = 280;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController();
    _authProvider = AuthProvider();
    _backendService = BackendService();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _createPost() async {
    if (_descriptionController.text.trim().isEmpty) {
      _showSnackBar('Please enter a description for your post', Colors.orange);
      return;
    }

    setState(() {
      _isPosting = true;
    });

    try {
      final post = Post(
        id: '', // Will be generated by backend
        userId: _authProvider.userId ?? '',
        username: _authProvider.appUser?.displayName ?? 'Unknown User',
        userProfilePicture: _authProvider.appUser?.profilePicture ?? '',
        songName: widget.selectedTrack['name'] ?? 'Unknown Song',
        artistName: (widget.selectedTrack['artists'] as List<dynamic>?)
            ?.map((artist) => artist['name'] as String)
            .join(', ') ?? 'Unknown Artist',
        songImage: (widget.selectedTrack['album']?['images'] as List<dynamic>?)
            ?.isNotEmpty == true
            ? widget.selectedTrack['album']['images'][0]['url'] as String
            : '',
        description: _descriptionController.text.trim(),
        likeCount: 0,
        createdAt: DateTime.now(),
        timeline: 'now',
        isLikedByCurrentUser: false,
      );

      await _backendService.createPost(post);
      
      if (mounted) {
        _showSnackBar('Post created successfully!', Colors.green);
        Navigator.pop(context, true); // Return true to indicate success
      }
    } catch (e) {
      if (mounted) {
        _showSnackBar('Failed to create post: $e', Colors.red);
      }
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final track = widget.selectedTrack;
    final albumImages = track['album']?['images'] as List<dynamic>? ?? [];
    final trackImage = albumImages.isNotEmpty 
        ? albumImages.first['url'] as String 
        : '';
    final artists = track['artists'] as List<dynamic>? ?? [];
    final artistNames = artists.map((artist) => artist['name'] as String).join(', ');

    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [AppColors.darkBackgroundStart, AppColors.darkBackgroundEnd],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Top bar
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: Row(
                  children: [
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(
                        Icons.arrow_back,
                        color: AppColors.onDarkPrimary,
                      ),
                    ),
                    const Spacer(),
                    Text(
                      'Create Post',
                      style: AppTextStyles.heading2OnDark.copyWith(
                        fontWeight: FontWeight.w800,
                        fontSize: 20,
                        letterSpacing: 0.6,
                      ),
                    ),
                    const Spacer(),
                    if (_isPosting)
                      const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: AppColors.primary,
                        ),
                      )
                    else
                      TextButton(
                        onPressed: _createPost,
                        child: Text(
                          'Post',
                          style: AppTextStyles.bodyOnDark.copyWith(
                            color: AppColors.primary,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
              ),

              // Content
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Selected track info
                      _buildSelectedTrackCard(track, trackImage, artistNames),
                      
                      const SizedBox(height: 24),
                      
                      // Description field
                      _buildDescriptionField(),
                      
                      const SizedBox(height: 16),
                      
                      // Character count
                      _buildCharacterCount(),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSelectedTrackCard(Map<String, dynamic> track, String trackImage, String artistNames) {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.onDarkPrimary.withOpacity(0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.onDarkPrimary.withOpacity(0.1),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            // Track image
            ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: trackImage.isNotEmpty
                  ? Image.network(
                      trackImage,
                      width: 60,
                      height: 60,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) => _buildPlaceholderImage(),
                    )
                  : _buildPlaceholderImage(),
            ),
            
            const SizedBox(width: 16),
            
            // Track info
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    track['name'] ?? 'Unknown Song',
                    style: AppTextStyles.bodyOnDark.copyWith(
                      fontWeight: FontWeight.w600,
                      fontSize: 16,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    artistNames,
                    style: AppTextStyles.captionOnDark.copyWith(
                      color: AppColors.onDarkSecondary,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
            
            // Check icon
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppColors.primary.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: AppColors.primary,
                size: 20,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPlaceholderImage() {
    return Container(
      width: 60,
      height: 60,
      decoration: BoxDecoration(
        color: AppColors.onDarkPrimary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Icon(
        Icons.music_note,
        color: AppColors.onDarkSecondary,
        size: 24,
      ),
    );
  }

  Widget _buildDescriptionField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'What\'s on your mind?',
          style: AppTextStyles.bodyOnDark.copyWith(
            fontWeight: FontWeight.w600,
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 12),
        Container(
          decoration: BoxDecoration(
            color: AppColors.onDarkPrimary.withOpacity(0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: AppColors.onDarkPrimary.withOpacity(0.1),
              width: 1,
            ),
          ),
          child: TextField(
            controller: _descriptionController,
            maxLines: 6,
            maxLength: _maxDescriptionLength,
            style: AppTextStyles.bodyOnDark,
            decoration: InputDecoration(
              hintText: 'Share your thoughts about this song...',
              hintStyle: AppTextStyles.captionOnDark.copyWith(
                color: AppColors.onDarkSecondary.withOpacity(0.6),
              ),
              border: InputBorder.none,
              contentPadding: const EdgeInsets.all(16),
              counterStyle: AppTextStyles.captionOnDark.copyWith(
                color: AppColors.onDarkSecondary,
              ),
            ),
            onChanged: (value) {
              setState(() {}); // Update character count
            },
          ),
        ),
      ],
    );
  }

  Widget _buildCharacterCount() {
    final currentLength = _descriptionController.text.length;
    final remaining = _maxDescriptionLength - currentLength;
    
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        Text(
          '$currentLength/$_maxDescriptionLength',
          style: AppTextStyles.captionOnDark.copyWith(
            color: remaining < 20 
                ? Colors.orange 
                : AppColors.onDarkSecondary,
          ),
        ),
      ],
    );
  }
}
